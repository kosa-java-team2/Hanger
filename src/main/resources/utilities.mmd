---
config:
  layout: elk
---
classDiagram
    direction LR

%% ========== Utilities ==========
    class ComparatorLike~T~ {
        <<Interface>>
        + compare(T, T) int
    }
    class InputUtil {
        + readNonEmptyLine() String
        + readLine() String
        + readInt(String) int
        + readIntInRange(String, int, int) int
        + readPriceAsInt(String) Integer?
        + readNonEmptyLine(String) String
        + readPasswordTwice(String, String) String
        - Scanner SCANNER
    }
    class PasswordHashingException
    class PasswordUtil {
        + newSalt() String
        + hash(String, String) String
        - SecureRandom RNG
    }
    class PriceUtil {
        + format(int) String
        - NumberFormat NF
    }
    class RegexUtil {
        + isValidUserId(String) boolean
        + isValidRRN(String) boolean
        + isValidPriceWithCommaOrPlain(String) boolean
        + isValidNickname(String) boolean
        - Pattern NICKNAME
        - Pattern RRN
        - Pattern PRICE_COMMA
        - Pattern USER_ID
        - Pattern PRICE_PLAIN
    }
    class SortUtil {
        - swap(List~T~, int, int) void
        + applyPostSort(List~Post~, int) void
        + sortPostsById(List~Post~) void
        - sort(List~T~, ComparatorLike~T~) void
        + sortPostsByCreatedDesc(List~Post~) void
        + sortPostsByPriceDesc(List~Post~) void
        + sortPostsByCategoryAsc(List~Post~) void
        - safeString(String) String
        + sortUsersById(List~User~) void
        + sortNotificationsById(List~Notification~) void
        + sortPostsByPriceAsc(List~Post~) void
        + sortTradesById(List~Trade~) void
    }

%% Relations
    SortUtil ..> ComparatorLike~T~
    SortUtil ..> Post
    SortUtil ..> User
    SortUtil ..> Notification
    SortUtil ..> Trade
    PasswordUtil --> PasswordHashingException
